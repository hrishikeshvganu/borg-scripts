#!/bin/bash
# borg_backup
# Taken from the QuickStart guide and modified.
# https://borgbackup.readthedocs.io/en/stable/quickstart.html#automating-backups

# Should be ran as a launchd process hourly.
# Checks to see if it can connect to our internal server
# before attempting a backup.

# Set this
# repo_server_address
repo_server_address=server.exmaple.org

# Determine logged in user
loggedInUser=$(/usr/bin/python -c 'from SystemConfiguration import SCDynamicStoreCopyConsoleUser; import sys; username = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]; username = [username,""][username in [u"loginwindow", None, u""]]; sys.stdout.write(username + "\n");')

# Get the hostname of the client
localhostname=$(/bin/hostname)

# Determine 'now' via date
# "2018-01-04-085601"
now=$(/bin/date "+%Y-%m-%d-%H%M%S")

# Setting this, so the repo does not need to be given on the commandline:
export BORG_REPO=${loggedInUser}@${repo_server_address}:backups

# and this to ask an external program to supply the passphrase:
# https://borgbackup.readthedocs.io/en/stable/faq.html#how-can-i-specify-the-encryption-passphrase-programmatically
# must have done security add-generic-password -D secret -U -a $USER -s borg-passphrase -w $(head -c 32 /dev/urandom | base64)
# or similar before hand.
export BORG_PASSCOMMAND="security find-generic-password -a ${loggedInUser} -s borg-passphrase -w"

# some helpers and error handling:
info() { printf "%s %s\n" "$(/bin/date)" "$*" >&2; }
trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

# define borg for launchd to find it
borg=/usr/local/bin/borg

# Check to see if we can backup
# Stolen from https://github.com/rtrouton/CasperCheck/blob/master/script/caspercheck.sh
# Thanks, Rich.

CheckForNetwork(){

  # Determine if the network is up by looking for any non-loopback network interfaces.
  local test

  if [[ -z "${NETWORKUP:=}" ]]; then
    test=$(/sbin/ifconfig -a inet 2>/dev/null | sed -n -e '/127.0.0.1/d' -e '/0.0.0.0/d' -e '/inet/p' | wc -l)
    
    if [[ "${test}" -gt 0 ]]; then
      NETWORKUP="-YES-"
    else    
      NETWORKUP="-NO-"
    fi

  fi
}
        
CheckSiteNetwork (){

  #  CheckSiteNetwork function adapted from Facebook's check_corp function script.
  #  check_corp script available on Facebook's IT-CPE Github repo:
  #
  # check_corp:
  #   This script verifies a system is on the corporate network.
  #   Input: CORP_URL= set this to a hostname on your corp network
  #   Optional ($1) contains a parameter that is used for testing.
  #   Output: Returns a check_corp variable that will return "True" if on 
  #   corp network, "False" otherwise.
  #   If a parameter is passed ($1), the check_corp variable will return it
  #   This is useful for testing scripts where you want to force check_corp
  #   to be either "True" or "False"
  # USAGE: 
  #   check_corp         # No parameter passed
  #   check_corp "True"  # Parameter of "True" is passed and returned


  site_network="False"
  ping=$(host -W .5 $repo_server_address)

  # If the ping fails - site_network="False"
  [[ $? -eq 0 ]] && site_network="True"

  # Check if we are using a test
  [[ -n "$1" ]] && site_network="$1"
}

borgCreate(){

info "Starting backup"

# Backup the most important directories into an archive named after
# the machine this script is currently running on:

$borg create                             \
    --verbose                            \
    --filter AME                         \
    --list                               \
    --stats                              \
    --show-rc                            \
    --compression lz4                    \
    --exclude-caches                     \
                                         \
    --exclude ~/Library/Caches           \
    ::${localhostname}-${now}            \
    /Users/${loggedInUser}               \

backup_exit=$?

}

borgPrune(){

info "Pruning repository"

# Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
# archives of THIS machine. The '{hostname}-' prefix is very important to
# limit prune's operation to this machine's archives and not apply to
# other machines' archives also:

$borg prune                              \
  --list                                 \
  --prefix ${localhostname}-             \
  --show-rc                              \
  --keep-daily    7                      \
  --keep-weekly   4                      \
  --keep-monthly  6                      \

prune_exit=$?

}

# Wait up to 30 minutes for a network connection to become 
# available which doesn't use a loopback address. This 
# is a condition which may occur if this script is run by 
# a LaunchDaemon at boot time.
#
# The network connection check will occur every 5 seconds
# until the 30 minute limit is reached.

info "Checking for active network connection."

CheckForNetwork
i=1
while [[ "${NETWORKUP}" != "-YES-" ]] && [[ $i -ne 360 ]]
do
  sleep 5
  NETWORKUP=
  CheckForNetwork
  echo $i
  i=$(( $i + 1 ))
done

# If no network connection is found within 30 minutes,
# the script will exit.

if [[ "${NETWORKUP}" != "-YES-" ]]; then
  info "Network connection appears to be offline. Exiting."
fi

if [[ "${NETWORKUP}" == "-YES-" ]]; then
  info "Network connection appears to be live."
  
  # Sleeping for 60 seconds to give WiFi time to come online.
  info "Pausing for 1 minute to give WiFi and DNS time to come online."
  sleep 60
  CheckSiteNetwork

  if [[ "$site_network" == "False" ]]; then
    info "Unable to verify access to site network. Exiting."
  fi 
 
  if [[ "$site_network" == "True" ]]; then
    info "Access to site network verified"
    borgCreate
    borgPrune
  fi

fi

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

if [ ${global_exit} -eq 1 ];
then
  info "Backup and/or Prune finished with a warning"
fi

if [ ${global_exit} -gt 1 ];
then
  info "Backup and/or Prune finished with an error"
fi

exit ${global_exit}
